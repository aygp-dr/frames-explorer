#+TITLE: Frame-Based Knowledge Representation Workshop
#+AUTHOR: aygp-dr
#+DATE: [2025-06-10 Tue]
#+PROPERTY: header-args :mkdirp yes
#+OPTIONS: toc:2

* Overview

This workshop provides a modern, practical implementation of frame-based knowledge representation inspired by FRL (Frame Representation Language) from MIT's AI Lab (1970s).

** Why Frames?

Frames are a way to represent structured knowledge with:
- *Slots*: Properties/attributes
- *Facets*: Multiple aspects of each slot (value, default, units, computed values)
- *Demons*: Active procedures that trigger on access/modification
- *Inheritance*: Prototype-based knowledge sharing

** Repository Structure

#+BEGIN_SRC bash :tangle .gitignore
*.pyc
__pycache__/
.pytest_cache/
*.egg-info/
.coverage
htmlcov/
.env
venv/
*.swp
*.swo
*~
.DS_Store
#+END_SRC

* Quick Start

#+BEGIN_SRC bash :results output :exports both
# Tangle all files from this org document
emacs --batch -l org --eval "(org-babel-tangle-file \"SETUP.org\")"

# Or if you prefer, manually run:
# C-c C-v t (in Emacs with this file open)

# Test the installation
python3 -c "from frame_system import Frame, fassert; print('✓ Frame system ready!')"
#+END_SRC

* Core Implementation

** Frame System (frame_system.py)

#+BEGIN_SRC python :tangle frame_system.py :shebang #!/usr/bin/env python3
"""
Frame-Based Knowledge Representation System
==========================================

A modern implementation of frame-based KR inspired by FRL.
Compatible with Python 3.6+ on all platforms.
"""

import json
from typing import Any, Dict, Optional, Callable, List


class Frame:
    """A frame is a knowledge structure with slots and facets."""
    
    _frames: Dict[str, 'Frame'] = {}  # Global frame registry
    
    def __init__(self, name: str):
        """Create a new frame with the given name."""
        self.name = name
        self.slots: Dict[str, Dict[str, Any]] = {}
        Frame._frames[name] = self
    
    def add_slot(self, slot_name: str, **facets) -> 'Frame':
        """Add or update a slot with multiple facets."""
        if slot_name not in self.slots:
            self.slots[slot_name] = {}
        self.slots[slot_name].update(facets)
        return self
    
    def get(self, slot_name: str, facet: str = 'value') -> Any:
        """
        Get a facet value from a slot.
        
        Special handling for:
        - 'value' with 'if_needed': Computes value on demand
        - Missing 'value': Falls back to 'default'
        """
        if slot_name not in self.slots:
            return None
        
        slot = self.slots[slot_name]
        
        # Handle computed values
        if facet == 'value' and 'value' not in slot and 'if_needed' in slot:
            computed = slot['if_needed'](self)
            slot['value'] = computed  # Cache the result
            return computed
        
        # Return requested facet or fall back to default
        result = slot.get(facet)
        if result is None and facet == 'value':
            result = slot.get('default')
        
        return result
    
    def put(self, slot_name: str, value: Any, facet: str = 'value') -> 'Frame':
        """
        Set a facet value, triggering demons if present.
        
        Demons triggered:
        - 'if_added': When value facet is modified
        - 'if_removed': When value is set to None
        """
        if slot_name not in self.slots:
            self.slots[slot_name] = {}
        
        old_value = self.slots[slot_name].get(facet)
        self.slots[slot_name][facet] = value
        
        # Trigger demons
        if facet == 'value':
            if value is not None and 'if_added' in self.slots[slot_name]:
                self.slots[slot_name]['if_added'](self, old_value, value)
            elif value is None and 'if_removed' in self.slots[slot_name]:
                self.slots[slot_name]['if_removed'](self, old_value)
        
        return self
    
    def remove_slot(self, slot_name: str) -> bool:
        """Remove a slot from the frame."""
        if slot_name in self.slots:
            del self.slots[slot_name]
            return True
        return False
    
    def describe(self, verbose: bool = False) -> None:
        """Pretty print the frame."""
        print(f"\nFrame: {self.name}")
        print("=" * (len(self.name) + 7))
        
        for slot_name, slot_data in self.slots.items():
            print(f"\n  {slot_name}:")
            for facet, value in sorted(slot_data.items()):
                if callable(value):
                    if verbose:
                        print(f"    {facet}: <function {value.__name__}>")
                    else:
                        print(f"    {facet}: <function>")
                else:
                    print(f"    {facet}: {value}")
    
    def to_dict(self, include_functions: bool = False) -> Dict[str, Any]:
        """Convert frame to dictionary (for serialization)."""
        data = {'name': self.name, 'slots': {}}
        
        for slot_name, slot_data in self.slots.items():
            data['slots'][slot_name] = {}
            for facet, value in slot_data.items():
                if not callable(value) or include_functions:
                    data['slots'][slot_name][facet] = (
                        f"<function {value.__name__}>" if callable(value) else value
                    )
        
        return data
    
    @classmethod
    def get_frame(cls, name: str) -> Optional['Frame']:
        """Retrieve a frame by name."""
        return cls._frames.get(name)
    
    @classmethod
    def all_frames(cls) -> List[str]:
        """Get names of all frames."""
        return list(cls._frames.keys())
    
    @classmethod
    def clear_all(cls) -> None:
        """Clear all frames from the registry."""
        cls._frames.clear()
    
    def __repr__(self) -> str:
        return f"Frame('{self.name}')"


# Convenience functions for FRL-style syntax
def fassert(name: str, **slots) -> Frame:
    """
    Create a frame with slots in FRL style.
    
    Example:
        robot = fassert('robot',
            color={'value': 'red'},
            height={'value': 4.5, 'units': 'feet'}
        )
    """
    frame = Frame(name)
    for slot_name, facets in slots.items():
        if isinstance(facets, dict):
            frame.add_slot(slot_name, **facets)
        else:
            # If not a dict, treat as a simple value
            frame.add_slot(slot_name, value=facets)
    return frame


def fget(frame_name: str, slot_name: str, facet: str = 'value') -> Any:
    """Get a value from a frame."""
    frame = Frame.get_frame(frame_name)
    return frame.get(slot_name, facet) if frame else None


def fput(frame_name: str, slot_name: str, value: Any, facet: str = 'value') -> Any:
    """Put a value in a frame."""
    frame = Frame.get_frame(frame_name)
    if frame:
        frame.put(slot_name, value, facet)
    return value


def fdel(frame_name: str) -> bool:
    """Delete a frame."""
    if frame_name in Frame._frames:
        del Frame._frames[frame_name]
        return True
    return False


# Persistence functions
def save_frames(filename: str, frames: Optional[List[str]] = None) -> None:
    """Save frames to JSON file."""
    data = {}
    frames_to_save = frames or Frame.all_frames()
    
    for name in frames_to_save:
        frame = Frame.get_frame(name)
        if frame:
            data[name] = frame.to_dict()
    
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2)
    
    print(f"Saved {len(data)} frames to {filename}")


def load_frames(filename: str) -> int:
    """Load frames from JSON file."""
    with open(filename, 'r') as f:
        data = json.load(f)
    
    count = 0
    for name, frame_data in data.items():
        frame = Frame(name)
        for slot_name, facets in frame_data.get('slots', {}).items():
            # Skip function placeholders
            clean_facets = {
                k: v for k, v in facets.items()
                if not (isinstance(v, str) and v.startswith('<function'))
            }
            frame.add_slot(slot_name, **clean_facets)
        count += 1
    
    print(f"Loaded {count} frames from {filename}")
    return count


if __name__ == "__main__":
    print("Frame System v1.0 - Ready!")
    print("Try: help(Frame) or help(fassert)")
#+END_SRC

** Examples Module (examples.py)

#+BEGIN_SRC python :tangle examples.py :shebang #!/usr/bin/env python3
"""
Frame System Examples
====================

Demonstrations of frame-based knowledge representation.
"""

import time
import random
from frame_system import Frame, fassert, fget, fput, save_frames, load_frames


def example_basic():
    """Basic frame creation and access."""
    print("\n=== Basic Frame Example ===")
    
    # Create a robot frame
    robot = fassert('robot',
        type={'value': 'service-robot'},
        manufacturer={'value': 'Acme Robotics'},
        model={'value': 'ServoBot 3000'},
        height={'value': 1.5, 'units': 'meters'},
        weight={'value': 45, 'units': 'kg'},
        color={'value': 'silver', 'options': ['silver', 'white', 'black']},
        battery={'value': 85, 'units': 'percent', 'min': 0, 'max': 100}
    )
    
    robot.describe()
    
    # Access values
    print(f"\nRobot height: {fget('robot', 'height')} {fget('robot', 'height', 'units')}")
    print(f"Battery level: {fget('robot', 'battery')}%")


def example_computed_values():
    """Demonstrate computed values with if_needed."""
    print("\n=== Computed Values Example ===")
    
    # Temperature sensor with computed Fahrenheit
    def celsius_to_fahrenheit(frame):
        celsius = frame.get('celsius', 'value')
        return celsius * 9/5 + 32 if celsius is not None else None
    
    sensor = fassert('temp-sensor',
        location={'value': 'living-room'},
        celsius={'value': 22},
        fahrenheit={'if_needed': celsius_to_fahrenheit}
    )
    
    print(f"Temperature: {fget('temp-sensor', 'celsius')}°C")
    print(f"Temperature: {fget('temp-sensor', 'fahrenheit')}°F (computed)")
    
    # Update Celsius and get new Fahrenheit
    fput('temp-sensor', 'celsius', 30)
    # Clear cached Fahrenheit
    sensor.slots['fahrenheit'].pop('value', None)
    print(f"\nAfter update: {fget('temp-sensor', 'fahrenheit')}°F")


def example_demons():
    """Demonstrate active values (demons)."""
    print("\n=== Demons (Active Values) Example ===")
    
    # Alert system
    alerts = []
    
    def battery_monitor(frame, old_val, new_val):
        if new_val < 20:
            alert = f"⚠️  LOW BATTERY: {new_val}%"
            alerts.append(alert)
            print(alert)
        elif old_val and old_val < 20 and new_val >= 20:
            alert = "✅ Battery level restored"
            alerts.append(alert)
            print(alert)
    
    device = fassert('laptop',
        model={'value': 'ThinkPad X1'},
        battery={
            'value': 100,
            'units': 'percent',
            'if_added': battery_monitor
        },
        alerts={'if_needed': lambda f: alerts.copy()}
    )
    
    # Simulate battery drain
    print("Simulating battery drain...")
    for level in [80, 50, 19, 15, 10, 25, 90]:
        fput('laptop', 'battery', level)
        time.sleep(0.1)  # Small delay for demo
    
    print(f"\nAll alerts: {fget('laptop', 'alerts')}")


def example_inheritance():
    """Demonstrate prototype-based inheritance."""
    print("\n=== Inheritance Example ===")
    
    # Robot class (prototype)
    robot_class = fassert('robot-prototype',
        category={'value': 'prototype'},
        default_height={'value': 1.5},
        default_weight={'value': 50},
        default_sensors={'value': ['camera', 'lidar', 'ultrasonic']},
        capabilities={'value': ['navigation', 'object-recognition']}
    )
    
    # Helper for inheritance
    def inherit_from(parent_name, slot, facet='value'):
        def getter(frame):
            parent_value = fget(parent_name, f"default_{slot}", facet)
            return parent_value
        return getter
    
    # Create robot instances
    rosie = fassert('rosie',
        prototype={'value': 'robot-prototype'},
        name={'value': 'Rosie'},
        height={'if_needed': inherit_from('robot-prototype', 'height')},
        weight={'value': 45},  # Override
        color={'value': 'red'},
        sensors={'if_needed': inherit_from('robot-prototype', 'sensors')}
    )
    
    c3po = fassert('c3po', 
        prototype={'value': 'robot-prototype'},
        name={'value': 'C-3PO'},
        height={'value': 1.7},  # Override
        weight={'if_needed': inherit_from('robot-prototype', 'weight')},
        color={'value': 'gold'},
        languages={'value': 6000000}
    )
    
    print("Rosie:")
    print(f"  Height: {fget('rosie', 'height')} (inherited)")
    print(f"  Weight: {fget('rosie', 'weight')} (overridden)")
    print(f"  Sensors: {fget('rosie', 'sensors')} (inherited)")
    
    print("\nC-3PO:")
    print(f"  Height: {fget('c3po', 'height')} (overridden)")
    print(f"  Weight: {fget('c3po', 'weight')} (inherited)")
    print(f"  Languages: {fget('c3po', 'languages')} (unique)")


def example_iot_system():
    """Real-world example: IoT device management."""
    print("\n=== IoT System Example ===")
    
    # Device monitoring system
    def check_device_health(frame):
        battery = frame.get('battery', 'value')
        temp = frame.get('temperature', 'value')
        last_seen = frame.get('last_seen', 'value')
        
        if battery and battery < 20:
            return 'critical'
        elif temp and temp > 80:
            return 'warning'
        elif last_seen and (time.time() - last_seen) > 300:
            return 'offline'
        else:
            return 'healthy'
    
    def update_last_seen(frame, old_val, new_val):
        frame.put('last_seen', time.time())
    
    # Create IoT devices
    devices = []
    for i in range(3):
        device = fassert(f'iot-{i}',
            device_type={'value': 'environmental-sensor'},
            location={'value': f'room-{i+1}'},
            battery={'value': random.randint(10, 100), 'units': '%'},
            temperature={'value': random.randint(18, 30), 'units': '°C'},
            humidity={'value': random.randint(30, 70), 'units': '%'},
            last_seen={'value': time.time()},
            health={'if_needed': check_device_health},
            data={
                'value': [],
                'if_added': update_last_seen
            }
        )
        devices.append(f'iot-{i}')
    
    # Simulate some issues
    fput('iot-0', 'battery', 15)  # Low battery
    fput('iot-1', 'temperature', 85)  # High temp
    
    # Status report
    print("IoT Device Status:")
    print("-" * 40)
    for device_name in devices:
        health = fget(device_name, 'health')
        battery = fget(device_name, 'battery')
        temp = fget(device_name, 'temperature')
        location = fget(device_name, 'location')
        
        status_icon = {
            'healthy': '✅',
            'warning': '⚠️ ',
            'critical': '🔴',
            'offline': '📴'
        }.get(health, '❓')
        
        print(f"{status_icon} {device_name} ({location}): "
              f"Battery={battery}%, Temp={temp}°C, Status={health}")


def example_persistence():
    """Demonstrate saving and loading frames."""
    print("\n=== Persistence Example ===")
    
    # Create some frames
    config = fassert('app-config',
        name={'value': 'FrameSystem'},
        version={'value': '1.0'},
        debug={'value': True},
        max_frames={'value': 1000}
    )
    
    user = fassert('current-user',
        username={'value': 'aygp-dr'},
        role={'value': 'admin'},
        preferences={
            'value': {
                'theme': 'dark',
                'notifications': True
            }
        }
    )
    
    print("Original frames:")
    print(f"  Config: {fget('app-config', 'name')} v{fget('app-config', 'version')}")
    print(f"  User: {fget('current-user', 'username')} ({fget('current-user', 'role')})")
    
    # Save frames
    save_frames('frames_backup.json')
    
    # Clear and reload
    Frame.clear_all()
    print(f"\nCleared all frames. Count: {len(Frame.all_frames())}")
    
    load_frames('frames_backup.json')
    print(f"\nAfter loading:")
    print(f"  Config: {fget('app-config', 'name')} v{fget('app-config', 'version')}")
    print(f"  User: {fget('current-user', 'username')} ({fget('current-user', 'role')})")


def run_all_examples():
    """Run all examples in sequence."""
    examples = [
        example_basic,
        example_computed_values,
        example_demons,
        example_inheritance,
        example_iot_system,
        example_persistence
    ]
    
    for example in examples:
        example()
        input("\nPress Enter for next example...")
        Frame.clear_all()  # Clean slate for next example


if __name__ == "__main__":
    print("Frame System Examples")
    print("=" * 50)
    print("\nAvailable examples:")
    print("1. example_basic() - Basic frame operations")
    print("2. example_computed_values() - Lazy computation")
    print("3. example_demons() - Active values")
    print("4. example_inheritance() - Prototype inheritance") 
    print("5. example_iot_system() - Real-world IoT scenario")
    print("6. example_persistence() - Save/load frames")
    print("7. run_all_examples() - Run all examples")
    print("\nRun any example function to see it in action!")
#+END_SRC

** Test Suite (test_frames.py)

#+BEGIN_SRC python :tangle test_frames.py :shebang #!/usr/bin/env python3
"""
Frame System Test Suite
=======================

Run with: python3 test_frames.py
Or with pytest: pytest test_frames.py -v
"""

import sys
import os
import tempfile
import json
from typing import List

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(__file__))

from frame_system import Frame, fassert, fget, fput, fdel, save_frames, load_frames


class TestResults:
    """Simple test result collector."""
    def __init__(self):
        self.passed = 0
        self.failed = 0
        self.errors = []
    
    def assert_equal(self, actual, expected, message=""):
        if actual == expected:
            self.passed += 1
            print(".", end="", flush=True)
        else:
            self.failed += 1
            print("F", end="", flush=True)
            self.errors.append(f"{message}: expected {expected}, got {actual}")
    
    def assert_true(self, condition, message=""):
        self.assert_equal(bool(condition), True, message)
    
    def assert_false(self, condition, message=""):
        self.assert_equal(bool(condition), False, message)
    
    def report(self):
        print(f"\n\nTest Results: {self.passed} passed, {self.failed} failed")
        if self.errors:
            print("\nFailures:")
            for error in self.errors:
                print(f"  - {error}")
        return self.failed == 0


def test_basic_operations(t: TestResults):
    """Test basic frame operations."""
    print("\nTesting basic operations", end="")
    
    # Create frame
    robot = fassert('test-robot', 
        color={'value': 'blue'},
        height={'value': 1.5}
    )
    
    t.assert_equal(fget('test-robot', 'color'), 'blue', "Basic fget")
    t.assert_equal(fget('test-robot', 'height'), 1.5, "Numeric value")
    
    # Update value
    fput('test-robot', 'color', 'red')
    t.assert_equal(fget('test-robot', 'color'), 'red', "Value update")
    
    # Non-existent frame/slot
    t.assert_equal(fget('no-such-frame', 'anything'), None, "Missing frame")
    t.assert_equal(fget('test-robot', 'no-such-slot'), None, "Missing slot")
    
    # Frame registry
    t.assert_true('test-robot' in Frame.all_frames(), "Frame in registry")
    
    # Delete frame
    fdel('test-robot')
    t.assert_false('test-robot' in Frame.all_frames(), "Frame deleted")


def test_facets(t: TestResults):
    """Test facet system."""
    print("\nTesting facets", end="")
    
    sensor = fassert('sensor',
        temperature={
            'value': 22.5,
            'units': 'celsius',
            'min': -50,
            'max': 100,
            'default': 20
        }
    )
    
    t.assert_equal(fget('sensor', 'temperature'), 22.5, "Value facet")
    t.assert_equal(fget('sensor', 'temperature', 'units'), 'celsius', "Units facet")
    t.assert_equal(fget('sensor', 'temperature', 'min'), -50, "Min facet")
    
    # Test default fallback
    sensor.slots['temperature'].pop('value')  # Remove value
    t.assert_equal(fget('sensor', 'temperature'), 20, "Default fallback")


def test_computed_values(t: TestResults):
    """Test if_needed computations."""
    print("\nTesting computed values", end="")
    
    compute_count = 0
    
    def compute_area(frame):
        nonlocal compute_count
        compute_count += 1
        width = frame.get('width', 'value')
        height = frame.get('height', 'value')
        return width * height if width and height else None
    
    rect = fassert('rectangle',
        width={'value': 10},
        height={'value': 5},
        area={'if_needed': compute_area}
    )
    
    # First access computes
    t.assert_equal(fget('rectangle', 'area'), 50, "Computed area")
    t.assert_equal(compute_count, 1, "Computed once")
    
    # Second access uses cached value
    t.assert_equal(fget('rectangle', 'area'), 50, "Cached area")
    t.assert_equal(compute_count, 1, "Still computed once")


def test_demons(t: TestResults):
    """Test active values (demons)."""
    print("\nTesting demons", end="")
    
    changes = []
    
    def track_changes(frame, old_val, new_val):
        changes.append((frame.name, old_val, new_val))
    
    def track_removal(frame, old_val):
        changes.append((frame.name, old_val, None))
    
    device = fassert('device',
        status={
            'value': 'online',
            'if_added': track_changes,
            'if_removed': track_removal
        }
    )
    
    # Test if_added
    fput('device', 'status', 'offline')
    t.assert_equal(len(changes), 1, "Change tracked")
    t.assert_equal(changes[0], ('device', 'online', 'offline'), "Correct change")
    
    # Test if_removed
    fput('device', 'status', None)
    t.assert_equal(len(changes), 2, "Removal tracked")
    t.assert_equal(changes[1][2], None, "Removed value")


def test_persistence(t: TestResults):
    """Test save/load functionality."""
    print("\nTesting persistence", end="")
    
    # Create frames
    config = fassert('config',
        app_name={'value': 'TestApp'},
        version={'value': 1.5},
        features={'value': ['auth', 'api', 'ui']}
    )
    
    # Save to temp file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        temp_file = f.name
    
    try:
        save_frames(temp_file)
        
        # Verify file contents
        with open(temp_file, 'r') as f:
            data = json.load(f)
        
        t.assert_true('config' in data, "Frame saved")
        t.assert_equal(
            data['config']['slots']['app_name']['value'], 
            'TestApp', 
            "String saved correctly"
        )
        
        # Clear and reload
        Frame.clear_all()
        t.assert_equal(len(Frame.all_frames()), 0, "Frames cleared")
        
        load_frames(temp_file)
        t.assert_equal(fget('config', 'app_name'), 'TestApp', "Frame loaded")
        t.assert_equal(fget('config', 'features'), ['auth', 'api', 'ui'], "List loaded")
        
    finally:
        os.unlink(temp_file)


def test_complex_scenario(t: TestResults):
    """Test a complex real-world scenario."""
    print("\nTesting complex scenario", end="")
    
    # Smart home system
    alerts = []
    
    def temperature_demon(frame, old_val, new_val):
        if new_val > 30:
            alerts.append(f"High temp in {frame.name}: {new_val}°C")
    
    def compute_avg_temp(frame):
        total = 0
        count = 0
        for room_name in ['living-room', 'bedroom', 'kitchen']:
            temp = fget(room_name, 'temperature')
            if temp is not None:
                total += temp
                count += 1
        return total / count if count > 0 else None
    
    # Create rooms
    for room, temp in [('living-room', 22), ('bedroom', 20), ('kitchen', 25)]:
        fassert(room,
            temperature={
                'value': temp,
                'if_added': temperature_demon
            },
            type={'value': 'room'}
        )
    
    # Create house
    house = fassert('smart-house',
        average_temp={'if_needed': compute_avg_temp},
        rooms={'value': ['living-room', 'bedroom', 'kitchen']}
    )
    
    # Test average computation
    avg = fget('smart-house', 'average_temp')
    t.assert_true(abs(avg - 22.333) < 0.01, "Average temperature")
    
    # Trigger alert
    fput('kitchen', 'temperature', 35)
    t.assert_equal(len(alerts), 1, "Alert triggered")
    t.assert_true('High temp' in alerts[0], "Alert message")


def run_tests():
    """Run all tests."""
    t = TestResults()
    
    test_functions = [
        test_basic_operations,
        test_facets,
        test_computed_values,
        test_demons,
        test_persistence,
        test_complex_scenario
    ]
    
    print("Running Frame System Tests")
    print("=" * 40)
    
    for test_func in test_functions:
        Frame.clear_all()  # Fresh start for each test
        test_func(t)
    
    print("\n")
    return t.report()


if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)
#+END_SRC

** Utilities (utils.py)

#+BEGIN_SRC python :tangle utils.py :shebang #!/usr/bin/env python3
"""
Frame System Utilities
======================

Helper functions and visualizations.
"""

from typing import List, Optional, Dict, Any
import json
from frame_system import Frame, fget


def frame_to_mermaid(frame_name: str, max_depth: int = 2) -> str:
    """
    Generate Mermaid diagram code for a frame.
    
    Args:
        frame_name: Name of the frame to visualize
        max_depth: Maximum depth for inheritance chains
    
    Returns:
        Mermaid diagram code as string
    """
    frame = Frame.get_frame(frame_name)
    if not frame:
        return f"graph LR\n    {frame_name}[Frame not found]"
    
    lines = ["graph TD"]
    lines.append(f'    {frame_name}["{frame_name}<br/>Frame"]')
    lines.append(f'    style {frame_name} fill:#f9f,stroke:#333,stroke-width:4px')
    
    # Add slots
    for slot_name, slot_data in frame.slots.items():
        slot_id = f"{frame_name}_{slot_name}"
        slot_label = f"{slot_name}"
        
        # Add value if present
        value = slot_data.get('value', slot_data.get('default'))
        if value is not None and not callable(value):
            slot_label += f"<br/>= {value}"
        
        lines.append(f'    {slot_id}["{slot_label}"]')
        lines.append(f'    {frame_name} --> {slot_id}')
        
        # Add important facets
        for facet in ['units', 'min', 'max']:
            if facet in slot_data:
                facet_id = f"{slot_id}_{facet}"
                lines.append(f'    {facet_id}["{facet}: {slot_data[facet]}"]')
                lines.append(f'    {slot_id} --> {facet_id}')
                lines.append(f'    style {facet_id} fill:#ffd,stroke:#333,stroke-width:1px')
    
    # Check for prototype/inheritance
    if 'prototype' in frame.slots or 'instance_of' in frame.slots:
        parent = frame.get('prototype') or frame.get('instance_of')
        if parent and max_depth > 1:
            lines.append(f'    {parent}["{parent}<br/>Parent Frame"]')
            lines.append(f'    {parent} -.-> {frame_name}')
            lines.append(f'    style {parent} fill:#9ff,stroke:#333,stroke-width:2px')
    
    return '\n'.join(lines)


def frames_to_dot(frames: Optional[List[str]] = None) -> str:
    """
    Generate Graphviz DOT format for frame visualization.
    
    Args:
        frames: List of frame names to include (None = all frames)
    
    Returns:
        DOT format string
    """
    frames = frames or Frame.all_frames()
    
    lines = ['digraph FrameSystem {']
    lines.append('    rankdir=LR;')
    lines.append('    node [shape=record];')
    
    for frame_name in frames:
        frame = Frame.get_frame(frame_name)
        if not frame:
            continue
        
        # Build node label
        slots_info = []
        for slot_name, slot_data in frame.slots.items():
            value = slot_data.get('value', slot_data.get('default', '?'))
            if not callable(value):
                slots_info.append(f"{slot_name}: {value}")
        
        label = f"{frame_name}|" + "\\n".join(slots_info[:5])  # Limit slots shown
        if len(slots_info) > 5:
            label += f"\\n... +{len(slots_info)-5} more"
        
        lines.append(f'    "{frame_name}" [label="{label}"];')
        
        # Add inheritance edges
        for slot in ['prototype', 'instance_of']:
            if slot in frame.slots:
                parent = frame.get(slot)
                if parent:
                    lines.append(f'    "{parent}" -> "{frame_name}" [style=dashed];')
    
    lines.append('}')
    return '\n'.join(lines)


def find_frames_with_slot(slot_name: str, facet: Optional[str] = None) -> List[str]:
    """
    Find all frames that have a specific slot.
    
    Args:
        slot_name: Name of the slot to search for
        facet: Optional specific facet to check for
    
    Returns:
        List of frame names
    """
    results = []
    
    for frame_name in Frame.all_frames():
        frame = Frame.get_frame(frame_name)
        if frame and slot_name in frame.slots:
            if facet is None or facet in frame.slots[slot_name]:
                results.append(frame_name)
    
    return results


def frame_stats() -> Dict[str, Any]:
    """Get statistics about the frame system."""
    total_frames = len(Frame.all_frames())
    total_slots = 0
    total_facets = 0
    facet_types = {}
    
    for frame_name in Frame.all_frames():
        frame = Frame.get_frame(frame_name)
        if frame:
            total_slots += len(frame.slots)
            for slot_data in frame.slots.values():
                total_facets += len(slot_data)
                for facet_name in slot_data:
                    facet_types[facet_name] = facet_types.get(facet_name, 0) + 1
    
    return {
        'total_frames': total_frames,
        'total_slots': total_slots,
        'total_facets': total_facets,
        'avg_slots_per_frame': total_slots / total_frames if total_frames > 0 else 0,
        'facet_types': facet_types
    }


def export_frames_to_csv(filename: str, frames: Optional[List[str]] = None) -> None:
    """Export frames to CSV format."""
    import csv
    
    frames = frames or Frame.all_frames()
    
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Frame', 'Slot', 'Facet', 'Value'])
        
        for frame_name in sorted(frames):
            frame = Frame.get_frame(frame_name)
            if frame:
                for slot_name, slot_data in sorted(frame.slots.items()):
                    for facet, value in sorted(slot_data.items()):
                        if not callable(value):
                            writer.writerow([frame_name, slot_name, facet, str(value)])


def validate_frame_schema(frame_name: str, schema: Dict[str, Dict[str, Any]]) -> List[str]:
    """
    Validate a frame against a schema.
    
    Args:
        frame_name: Name of frame to validate
        schema: Dict of slot_name -> {required_facets, types, constraints}
    
    Returns:
        List of validation errors (empty if valid)
    """
    errors = []
    frame = Frame.get_frame(frame_name)
    
    if not frame:
        return [f"Frame '{frame_name}' not found"]
    
    for slot_name, requirements in schema.items():
        if 'required' in requirements and requirements['required']:
            if slot_name not in frame.slots:
                errors.append(f"Missing required slot: {slot_name}")
                continue
        
        if slot_name in frame.slots:
            slot_data = frame.slots[slot_name]
            
            # Check required facets
            for facet in requirements.get('required_facets', []):
                if facet not in slot_data:
                    errors.append(f"Slot '{slot_name}' missing required facet: {facet}")
            
            # Check value type
            if 'type' in requirements:
                value = slot_data.get('value')
                expected_type = requirements['type']
                if value is not None and not isinstance(value, expected_type):
                    errors.append(f"Slot '{slot_name}' value has wrong type: "
                                f"expected {expected_type.__name__}, "
                                f"got {type(value).__name__}")
    
    return errors


if __name__ == "__main__":
    # Demo utilities
    from examples import example_basic, example_inheritance
    
    print("Frame System Utilities Demo")
    print("=" * 40)
    
    # Create some frames
    example_basic()
    example_inheritance()
    
    # Show statistics
    stats = frame_stats()
    print("\nFrame System Statistics:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    # Find frames with specific slots
    print("\nFrames with 'color' slot:")
    for frame_name in find_frames_with_slot('color'):
        print(f"  - {frame_name}: {fget(frame_name, 'color')}")
    
    # Generate Mermaid diagram
    print("\nMermaid diagram for 'robot':")
    print(frame_to_mermaid('robot'))
    
    # Export to CSV
    export_frames_to_csv('frames_export.csv')
    print("\nExported frames to frames_export.csv")
#+END_SRC

** README.md

#+BEGIN_SRC markdown :tangle README.md
# Frame-Based Knowledge Representation Workshop

A modern Python implementation of frame-based knowledge representation inspired by MIT's FRL (Frame Representation Language) from the 1970s.

## Features

- **Frames**: Knowledge structures with slots and facets
- **Computed Values**: Lazy evaluation with `if_needed`
- **Active Values (Demons)**: Triggers on value changes
- **Prototype Inheritance**: Share knowledge between frames
- **Persistence**: Save/load frames as JSON
- **Cross-Platform**: Works on Linux, FreeBSD, macOS, and in containers

## Quick Start

```bash
# Clone the repository
git clone https://github.com/aygp-dr/frames-explorer.git
cd frames-explorer

# Tangle files from SETUP.org (if using Emacs)
emacs --batch -l org --eval "(org-babel-tangle-file \"SETUP.org\")"

# Or just use the Python files directly
python3 examples.py
```

## Basic Usage

```python
from frame_system import fassert, fget, fput

# Create a frame
robot = fassert('my-robot',
    type={'value': 'service-robot'},
    height={'value': 1.5, 'units': 'meters'},
    battery={'value': 85, 'units': 'percent'}
)

# Access values
print(fget('my-robot', 'height'))  # 1.5
print(fget('my-robot', 'height', 'units'))  # meters

# Update values
fput('my-robot', 'battery', 75)
```

## Examples

Run the examples to see various features:

```python
python3 examples.py
# Then try: example_basic(), example_demons(), etc.
```

## Testing

Run the test suite:

```bash
python3 test_frames.py
```

## Platform Compatibility

Tested on:
- Linux x86_64 (Debian)
- Linux ARM64 (Raspberry Pi)
- FreeBSD
- Alpine Linux (Docker)

## License

MIT License - Use freely!

## Credits

Inspired by FRL (Frame Representation Language) from MIT AI Lab, 1970s.
Modern implementation by aygp-dr.
#+END_SRC

** Platform-Specific Notes

#+BEGIN_SRC markdown :tangle PLATFORMS.md
# Platform-Specific Notes

## FreeBSD

No special requirements. Python 3.6+ should work out of the box:

```bash
pkg install python3
python3 frame_system.py
```

## Linux (Debian/Ubuntu/Raspberry Pi OS)

```bash
apt-get update
apt-get install python3
python3 frame_system.py
```

## Alpine Linux (Docker)

```dockerfile
FROM alpine:latest
RUN apk add --no-cache python3
COPY *.py /app/
WORKDIR /app
CMD ["python3", "examples.py"]
```

## macOS

Use system Python or Homebrew:

```bash
brew install python3
python3 frame_system.py
```

## Windows

Use WSL or native Python:

```powershell
python frame_system.py
```

## Common Issues

1. **Import errors**: Make sure all .py files are in the same directory
2. **Python version**: Requires Python 3.6+ (for f-strings and type hints)
3. **File permissions**: Ensure .py files are readable

## Minimal Requirements

- Python 3.6+
- No external dependencies
- ~100KB disk space
- Works on ARM, x86, x64 architectures
#+END_SRC

** Docker Support

#+BEGIN_SRC dockerfile :tangle Dockerfile
# Multi-platform Dockerfile for Frame System
FROM python:3.9-alpine

WORKDIR /app

# Copy frame system files
COPY *.py ./
COPY README.md ./

# No dependencies needed!
RUN python3 -m py_compile *.py

# Run tests on build to verify
RUN python3 test_frames.py

# Interactive Python with frame system loaded
CMD ["python3", "-i", "frame_system.py"]
#+END_SRC

#+BEGIN_SRC yaml :tangle docker-compose.yml
version: '3.8'

services:
  frames:
    build: .
    container_name: frame-workshop
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
    command: python3 examples.py
    
  frames-interactive:
    build: .
    container_name: frame-workshop-interactive
    volumes:
      - ./data:/app/data
    stdin_open: true
    tty: true
    command: python3 -i frame_system.py
#+END_SRC

** Makefile

#+BEGIN_SRC makefile :tangle Makefile
# Frame System Makefile

.PHONY: all test clean docker tangle

# Default target
all: test

# Tangle from org file (requires Emacs)
tangle:
	emacs --batch -l org --eval "(org-babel-tangle-file \"SETUP.org\")"

# Run tests
test:
	python3 test_frames.py

# Run examples
examples:
	python3 -i examples.py

# Clean generated files
clean:
	rm -f *.pyc __pycache__/* frames_backup.json frames_export.csv
	rmdir __pycache__ 2>/dev/null || true

# Docker operations
docker-build:
	docker build -t frame-workshop .

docker-run:
	docker run -it --rm frame-workshop

docker-test:
	docker run --rm frame-workshop python3 test_frames.py

# Platform-specific tests
test-all-platforms:
	@echo "Testing on current platform..."
	python3 test_frames.py
	@echo "\nTesting in Alpine container..."
	docker run --rm -v $(PWD):/app alpine:latest sh -c "apk add python3 && cd /app && python3 test_frames.py"
	@echo "\nAll platform tests completed!"
#+END_SRC

* Testing Instructions

** Local Testing

#+BEGIN_SRC bash :results output
# Quick test after tangling
cd ~/projects/aygp-dr/frames-explorer/
python3 test_frames.py
#+END_SRC

** FreeBSD Testing

#+BEGIN_SRC bash :eval no
# On FreeBSD
cd ~/projects/aygp-dr/frames-explorer/
python3.9 test_frames.py  # Or whatever Python version
#+END_SRC

** Docker Testing

#+BEGIN_SRC bash :eval no
# Test in Alpine container
docker run --rm -v $(pwd):/work -w /work alpine:latest sh -c \
  "apk add --no-cache python3 && python3 test_frames.py"
#+END_SRC

** Cross-Platform Test Script

#+BEGIN_SRC bash :tangle test-all.sh :shebang #!/bin/bash
#!/bin/bash
# Test frame system on multiple platforms

echo "Frame System Cross-Platform Test"
echo "================================"

# Detect current platform
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    PLATFORM="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    PLATFORM="macOS"
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    PLATFORM="FreeBSD"
else
    PLATFORM="Unknown"
fi

echo "Current platform: $PLATFORM"
echo "Python version: $(python3 --version)"
echo ""

# Run tests
echo "Running test suite..."
python3 test_frames.py

# Check if Docker is available
if command -v docker &> /dev/null; then
    echo -e "\nTesting in Docker (Alpine)..."
    docker run --rm -v $(pwd):/app -w /app alpine:latest sh -c \
        "apk add --no-cache python3 > /dev/null 2>&1 && python3 test_frames.py"
else
    echo -e "\nDocker not available, skipping container test"
fi

echo -e "\nTest complete!"
#+END_SRC

* Repository Setup Commands

#+BEGIN_SRC bash :results output :dir ~ :exports code
# Create repository
mkdir -p ~/projects/aygp-dr/frames-explorer
cd ~/projects/aygp-dr/frames-explorer

# Initialize git
git init
echo "# Frame-Based Knowledge Workshop" > README.md
git add README.md
git commit -m "Initial commit"

# After tangling this file:
# git add *.py *.md Dockerfile docker-compose.yml Makefile .gitignore
# git commit -m "Add frame system implementation"

echo "Repository created at: ~/projects/aygp-dr/frames-explorer"
#+END_SRC

* Usage Summary

1. **Tangle this file**: `C-c C-v t` in Emacs or run the command above
2. **Test it**: `python3 test_frames.py`
3. **Play with it**: `python3 -i examples.py`
4. **Use it**: Import `frame_system` in your projects

The frame system is now ready to use on all your platforms! 🎉
